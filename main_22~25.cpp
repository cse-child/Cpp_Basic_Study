// 어소트락 게임 아카데미 - 22. 지역 변수/ 전역 변수부터

#include <stdio.h>


/* 변수의 종류 */
// 1. 지역변수
// 2. 전역변수
// 3. 정적변수 (static)
// 4. 외부변수 (extern)

/* 메모리 영역 */
// 1. 스택 영역
// 2. 데이터 영역
// 3. 읽기 전용(코드, ROM)
// 4. 힙 영역


// 전역 변수
int g_i = 0;
// 사용되는 메모리 영역 : Data 영역
// 함수를 실행시켜서 저장되는 스택 영역과 별개로 함수가 끝나고 계속 존재한다.


// Data 영역 특징
// 프로그램 시작 시 생성
// 프로그램 종료 시 해제


/* 분할 구현 */
// "func.h"의 내용 "int Add(int a, int b);" 와 같은 뜻
#include "func.h"
// 분할 구현 하는 이유
// 헤더와 파일 단위로 관련있는 기능들을 묶어 관리하기 쉽게 함
// 코드가 더 직관적이고 코드의 재사용이 용이함


/* 정적 변수 (static) */
// 사용되는 메모리 영역 : Data 영역 (전역변수와 같음)
static int g_iStatic = 0;
// 전역 변수와의 차이점 : 전역변수는 다른 cpp파일에 같은 이름의 전역변수를 선언해도
// 컴파일 단계에서는 문법적으로 문제없이 실행된다. 
// 그러나 빌드 과정에서 각각 파일을 합쳐서 링킹(Linking)과정에서 전역변수 중복의 에러가 발생한다. (링크에러: LNK~~)
// 반면 정적 변수는 다른 cpp파일에 같은 이름의 정적 변수를 선언해도 컴파일이 성공적으로 실행된다.
// 정적 변수는 static (정적, 움직이지 않는)의 뜻에 맞게 해당 변수가 선언된 위치에서만 고정되어 있다.
// 따라서 다른 cpp파일에 같은 이름의 정적변수가 선언되어있어도 각 변수는 자신이 선언된 파일에서만 동작하기 때문에
// 문제없이 프로그램이 실행되는 것이다.
// 즉, 정적 변수는 중복 정의 문제(Naming 문제)가 발생하지 않는다.


/* 외부 변수 (extern) */
#include "common.h"


void Test() {
	++g_i; // 전역변수 증가시킴

	// i는 데이터 영역의 메모리를 사용하여 Test함수내에서만 계속 살아있다.
	// 즉, Test함수의 실행이 끝나도 계속해서 데이터 값이 유지된다.
	// main함수에서는 지칭하여 사용할 수 없다.
	static int i = 0; 
	// 정적변수를 선언한 함수의 호출횟수를 세고싶은데 '실수로' 다른곳에서
	// 변수를 다른값으로 초기화할 수도 있기때문에 선언된 위치에서만 작동하도록
	// '제한'하는것이 정적변수의 프로그램 기능이다.
	// 또한 static은 최초로 실행되는 한번만 변수가 선언되고 초기화되며
	// 이후에 코드가 읽힐때엔 실행되지 않는다.
}


int main() {
	int a = 0;
	g_iExtern = 500;

	// F12 : 선언, 정의 부분으로 이동
	Test();
	Test();
	Test();

	printf("Test 함수 호출 횟수 : %d\n", g_i);

	int data = Add(10, 20);
	int i = Mul(10, 20);

	return 0;
}

